<Application x:Class="WeatherLab.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WeatherLab"
             xmlns:controlzex="urn:controlzex"
      
             xmlns:styleableWindow="clr-namespace:WpfStyleableWindow.StyleableWindow"
             
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:Converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
             StartupUri="MainWindow.xaml"
             DispatcherUnhandledException="Application_DispatcherUnhandledException">
    <Application.Resources>
        
        
        

        <ResourceDictionary>
            <!--TODO: Fix the bold cloud probelm, add the cross canvas-->



            <!--Setting the Colors-->
            <SolidColorBrush x:Key="BackgroundColor" Color="#E8ECF1"></SolidColorBrush>
            <SolidColorBrush x:Key="MainBlue" Color="#7B9EAE"></SolidColorBrush>
            <SolidColorBrush x:Key="SecondBlue" Color="#75BAC8"></SolidColorBrush>
            <SolidColorBrush x:Key="DarkBlue" Color="#4E8BA7"></SolidColorBrush>
            <SolidColorBrush x:Key="Gold" Color="#F3E40F"></SolidColorBrush>
            <SolidColorBrush x:Key="Gray" Color="#707070"></SolidColorBrush>
            <SolidColorBrush x:Key="LockedBack" Color="#E4E4E4"></SolidColorBrush>
            <SolidColorBrush x:Key="LockedFore" Color="#AFAFAF"></SolidColorBrush>
            <SolidColorBrush x:Key="WindowBar" Color="#F9F9F9"></SolidColorBrush>
            <SolidColorBrush x:Key="Disabled" Color="#FFBDBDBD"></SolidColorBrush>

            <!--Region Custom Window tyle -->
            <SolidColorBrush x:Key="WindowColor" Color="Red"/>
            <SolidColorBrush x:Key="WindowBackColor" Color="Orange"/>
            <SolidColorBrush x:Key="WindowForeColor" Color="WhiteSmoke"/>
            <SolidColorBrush x:Key="WindowForeHighlightColor" Color="WhiteSmoke"/>
            <SolidColorBrush x:Key="WindowButtonColor" Color="Blue"/>
            <SolidColorBrush x:Key="WindowButtonOverColor" Color="LightBlue"/>
            <SolidColorBrush x:Key="WindowButtonPressedColor" Color="DarkBlue"/>



            <!--The window template and it's components -->

            <styleableWindow:WindowMinimizeCommand x:Key="MinimizeCommand"></styleableWindow:WindowMinimizeCommand>
            <styleableWindow:WindowMaximizeCommand x:Key="MaximizeCommand"></styleableWindow:WindowMaximizeCommand>
            <styleableWindow:WindowCloseCommand x:Key="CloseCommand"></styleableWindow:WindowCloseCommand>

            <Style TargetType="{x:Type Button}" x:Key="WindowButton">
                <Setter Property="Height" Value="15"/>
                <Setter Property="Width" Value="15"/>
                <Setter Property="Background" Value="{StaticResource WindowBar}"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="{StaticResource Gray}"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{StaticResource Gray}"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{StaticResource Gray}"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Image}" x:Key="WindowIcon">
                <Setter Property="Height" Value="15"/>
                <Setter Property="Width" Value="15"/>
            </Style>

            <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
                <Grid Background="{StaticResource WindowBar}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" MaxHeight="35" MinHeight="20"/>
                            <RowDefinition Height="30*"/>
                        </Grid.RowDefinitions>

                        <Grid Grid.Row="0" Margin="5,0,5,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="75"/>
                            </Grid.ColumnDefinitions>

                            <!--Icon Position-->
                            <Label Grid.Column="0"                                         
                                    styleableWindow:ControlDoubleClickBehavior.ExecuteCommand ="{StaticResource CloseCommand}"                                                
                                    styleableWindow:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
                                <Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                          
                                    Width="16"                                            
                                    styleableWindow:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                            
                                    styleableWindow:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
                            </Label>

                            <!-- Center Text Position -->
                            <Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                   
                                    HorizontalContentAlignment="Center" 
                                    VerticalContentAlignment="Center" 
                                    HorizontalAlignment="Stretch" 
                                    VerticalAlignment="Stretch" 
                                    Foreground="{StaticResource Gray}"                                            
                                    FontSize="16" 
                                    styleableWindow:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                                    styleableWindow:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}" 
                                    styleableWindow:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                                    styleableWindow:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                                    styleableWindow:ShowSystemMenuBehavior.RightButtonShow="true">
                            </Label>

                            <!--Buttons Postions -->
                            <StackPanel Grid.Column="2" Orientation="Horizontal" FlowDirection="RightToLeft">
                                <Button DockPanel.Dock="Right"  Style="{StaticResource WindowButton}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" FontWeight="Bold">x</Button>
                            </StackPanel>
                        </Grid>
                        <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <Grid>
                                <AdornerDecorator>
                                    <ContentPresenter x:Name="WindowContent"/>
                                </AdornerDecorator>
                                <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" styleableWindow:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" styleableWindow:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" styleableWindow:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" styleableWindow:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" styleableWindow:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" styleableWindow:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" styleableWindow:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" styleableWindow:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                            <Condition Property="WindowState" Value="Normal"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- the custom window style and the window template  
        Here you can customize the look of the window without having to touch the control template  
        or comment out the brushes and create a new style (see the red style below)-->

            <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
                <Setter Property="WindowStyle" Value="None"/>
                <Setter Property="AllowsTransparency" Value="True"/>
                <Setter Property="MinWidth" Value="200"/>
                <Setter Property="MinHeight" Value="46"/>
                <!--CaptionHeight + ResizeBorderThickness * 2-->
                <Setter Property="Background" Value="{StaticResource WindowBar}"/>
                <Setter Property="BorderBrush" Value="{StaticResource WindowBar}"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="Template" Value="{StaticResource WindowTemplate}"/>
            </Style>







            <!--Setting Icons-->
            <!--Cloud-->
            <!--Black-->
            <Canvas x:Key="BlackCloud" x:Name="Layer_1" Width="12" Height="12" Canvas.Left="0" Canvas.Top="0">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g12" Canvas.Left="-44" Canvas.Top="-44">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.63364685 0 0 0.63364685 18.297325 18.186137"/>
                    </Canvas.RenderTransform>
                    <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="path2" Fill="#000000" StrokeThickness="0.45">
                        <Path.Data>
                            <PathGeometry Figures="m 44.739525 63.520356 c -7.664965 0 -13.879356 -6.213523 -13.879356 -13.879356 0 -7.665833 6.214391 -13.879356 13.879356 -13.879356 5.208879 0 9.741923 2.873386 12.115589 7.116662 0.576066 -0.09804 1.160807 -0.177852 1.763767 -0.177852 5.749374 0 10.40995 4.661444 10.40995 10.410819 0 5.747639 -4.660576 10.409083 -10.40995 10.409083 -2.407502 0 -11.104873 0 -13.879356 0 z m 13.879356 -3.470273 c 3.832916 0 6.940545 -3.107629 6.940545 -6.93881 0 -3.832917 -3.107629 -6.940546 -6.940545 -6.940546 -1.38811 0 -2.673846 0.417301 -3.759173 1.120031 -1.067977 -4.611993 -5.182853 -8.059709 -10.120183 -8.059709 -5.748507 0 -10.409084 4.660577 -10.409084 10.409951 0 5.748507 4.660577 10.409083 10.409084 10.409083 3.137994 0 11.260167 0 13.879356 0 z" FillRule="EvenOdd"/>
                        </Path.Data>
                    </Path>
                </Canvas>
            </Canvas>
            <!--White-->
            <Canvas x:Key="WhiteCloud" x:Name="Layer_2" Width="12" Height="12" Canvas.Left="0" Canvas.Top="0">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g2" Canvas.Left="-44" Canvas.Top="-44">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.63364685 0 0 0.63364685 18.297325 18.186137"/>
                    </Canvas.RenderTransform>
                    <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="pth2" Fill="White" StrokeThickness="0.45" Stroke="White">
                        <Path.Data>
                            <PathGeometry Figures="m 44.739525 63.520356 c -7.664965 0 -13.879356 -6.213523 -13.879356 -13.879356 0 -7.665833 6.214391 -13.879356 13.879356 -13.879356 5.208879 0 9.741923 2.873386 12.115589 7.116662 0.576066 -0.09804 1.160807 -0.177852 1.763767 -0.177852 5.749374 0 10.40995 4.661444 10.40995 10.410819 0 5.747639 -4.660576 10.409083 -10.40995 10.409083 -2.407502 0 -11.104873 0 -13.879356 0 z m 13.879356 -3.470273 c 3.832916 0 6.940545 -3.107629 6.940545 -6.93881 0 -3.832917 -3.107629 -6.940546 -6.940545 -6.940546 -1.38811 0 -2.673846 0.417301 -3.759173 1.120031 -1.067977 -4.611993 -5.182853 -8.059709 -10.120183 -8.059709 -5.748507 0 -10.409084 4.660577 -10.409084 10.409951 0 5.748507 4.660577 10.409083 10.409084 10.409083 3.137994 0 11.260167 0 13.879356 0 z" FillRule="EvenOdd"/>
                        </Path.Data>
                    </Path>
                </Canvas>
            </Canvas>

            <Canvas x:Key="WhiteCloud2" x:Name="Laaaayer_2" Width="12" Height="12" Canvas.Left="0" Canvas.Top="0">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g322" Canvas.Left="-44" Canvas.Top="-44">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.63364685 0 0 0.63364685 18.297325 18.186137"/>
                    </Canvas.RenderTransform>
                    <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="aapth2" Fill="White" StrokeThickness="0.45" Stroke="White">
                        <Path.Data>
                            <PathGeometry Figures="m 44.739525 63.520356 c -7.664965 0 -13.879356 -6.213523 -13.879356 -13.879356 0 -7.665833 6.214391 -13.879356 13.879356 -13.879356 5.208879 0 9.741923 2.873386 12.115589 7.116662 0.576066 -0.09804 1.160807 -0.177852 1.763767 -0.177852 5.749374 0 10.40995 4.661444 10.40995 10.410819 0 5.747639 -4.660576 10.409083 -10.40995 10.409083 -2.407502 0 -11.104873 0 -13.879356 0 z m 13.879356 -3.470273 c 3.832916 0 6.940545 -3.107629 6.940545 -6.93881 0 -3.832917 -3.107629 -6.940546 -6.940545 -6.940546 -1.38811 0 -2.673846 0.417301 -3.759173 1.120031 -1.067977 -4.611993 -5.182853 -8.059709 -10.120183 -8.059709 -5.748507 0 -10.409084 4.660577 -10.409084 10.409951 0 5.748507 4.660577 10.409083 10.409084 10.409083 3.137994 0 11.260167 0 13.879356 0 z" FillRule="EvenOdd"/>
                        </Path.Data>
                    </Path>
                </Canvas>
            </Canvas>

            <!--Lock-->
            <!--Black-->
            <Canvas x:Key="BlackLock" Name="svg6" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}">
                <Canvas.RenderTransform>
                    <TranslateTransform X="-12" Y="-12"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g21">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="1.8089993 0 0 1.8089993 -9.7079915 4.7332675"/>
                    </Canvas.RenderTransform>
                    <Canvas Name="g16">
                        <Rectangle xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Canvas.Left="9.5316191" Canvas.Top="3.7427256" Width="4.9367614" Height="3.0169098" RadiusX="0.54852909" RadiusY="0.54852909" Name="rect2" StrokeThickness="0.54852909" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                        <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="path4" StrokeThickness="0.54852909" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round">
                            <Path.Data>
                                <PathGeometry Figures="M 10.628677 3.7427254 V 2.6456673 a 1.371323 1.371323 0 0 1 2.742646 0 v 1.0970581" FillRule="NonZero"/>
                            </Path.Data>
                        </Path>
                    </Canvas>
                </Canvas>
            </Canvas>
            <!-- LockedFore -->
            <Canvas x:Key="LockedLock" Name="svfg6" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}">
                <Canvas.RenderTransform>
                    <TranslateTransform X="-12" Y="-12"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g2f1">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="1.8089993 0 0 1.8089993 -9.7079915 4.7332675"/>
                    </Canvas.RenderTransform>
                    <Canvas Name="g1f6">
                        <Rectangle xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Canvas.Left="9.5316191" Canvas.Top="3.7427256" Width="4.9367614" Height="3.0169098" RadiusX="0.54852909" RadiusY="0.54852909" Name="MMrect2" StrokeThickness="0.54852909" Stroke="#AFAFAF" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                        <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="pasth4" StrokeThickness="0.54852909" Stroke="#AFAFAF" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round">
                            <Path.Data>
                                <PathGeometry Figures="M 10.628677 3.7427254 V 2.6456673 a 1.371323 1.371323 0 0 1 2.742646 0 v 1.0970581" FillRule="NonZero"/>
                            </Path.Data>
                        </Path>
                    </Canvas>
                </Canvas>
            </Canvas>
            <!--White-->
            <Canvas x:Key="WhiteLock" Name="svg6_2" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}">
                <Canvas.RenderTransform>
                    <TranslateTransform X="-12" Y="-12"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g1">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="1.8089993 0 0 1.8089993 -9.7079915 4.7332675"/>
                    </Canvas.RenderTransform>
                    <Canvas Name="g6">
                        <Rectangle xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Canvas.Left="9.5316191" Canvas.Top="3.7427256" Width="4.9367614" Height="3.0169098" RadiusX="0.54852909" RadiusY="0.54852909" Name="ect2" StrokeThickness="0.54852909" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                        <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="path5" StrokeThickness="0.54852909" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round">
                            <Path.Data>
                                <PathGeometry Figures="M 10.628677 3.7427254 V 2.6456673 a 1.371323 1.371323 0 0 1 2.742646 0 v 1.0970581" FillRule="NonZero"/>
                            </Path.Data>
                        </Path>
                    </Canvas>
                </Canvas>
            </Canvas>

            <!--Map-->
            <!--Black-->
            <Canvas x:Key="BlackMap" Name="svg8" Width="24" Height="24">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g19">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.43019102 0 0 0.43019102 6.8377079 6.8377079"/>
                    </Canvas.RenderTransform>
                    <Polygon xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Points="23,2 16,6 8,2 1,6 1,22 8,18 16,22 23,18 " Name="polygon2" FillRule="NonZero" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="8" Y1="2" X2="8" Y2="18" Name="line4" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="16" Y1="6" X2="16" Y2="22" Name="line6" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                </Canvas>
            </Canvas>

            <!--White-->
            <Canvas x:Key="WhiteMap" Name="svg8_2" Width="24" Height="24">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="poih19">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.43019102 0 0 0.43019102 6.8377079 6.8377079"/>
                    </Canvas.RenderTransform>
                    <Polygon xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Points="23,2 16,6 8,2 1,6 1,22 8,18 16,22 23,18 " Name="polygon3" FillRule="NonZero" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="8" Y1="2" X2="8" Y2="18" Name="line8" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="16" Y1="6" X2="16" Y2="22" Name="line7" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                </Canvas>
            </Canvas>

            <!--bar-Chart-->
            <!--Black-->
            <Canvas x:Key="BlackBarChart" Name="svg9" Width="24" Height="24">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g20">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.67283412 0 0 0.67283412 3.9259905 3.9259905"/>
                    </Canvas.RenderTransform>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="18" Y1="20" X2="18" Y2="10" Name="ine2" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="12" Y1="20" X2="12" Y2="4" Name="lie4" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="6" Y1="20" X2="6" Y2="14" Name="lie6" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                </Canvas>
            </Canvas>

            <!--White-->
            <Canvas x:Key="WhiteBarChart" Name="svg10" Width="24" Height="24">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g22">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.67283412 0 0 0.67283412 3.9259905 3.9259905"/>
                    </Canvas.RenderTransform>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="18" Y1="20" X2="18" Y2="10" Name="line9" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="12" Y1="20" X2="12" Y2="4" Name="line10" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="6" Y1="20" X2="6" Y2="14" Name="line11" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                </Canvas>
            </Canvas>

            <!--file-text-->
            <!--Black-->
            <Canvas x:Key="BlackFileText" Name="svg12" Width="24" Height="24">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g25">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.41289393 0 0 0.41289393 7.0494538 7.041092"/>
                    </Canvas.RenderTransform>
                    <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="path6" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round">
                        <Path.Data>
                            <PathGeometry Figures="M 14 2 H 6 A 2 2 0 0 0 4 4 v 16 a 2 2 0 0 0 2 2 h 12 a 2 2 0 0 0 2 -2 V 8 Z" FillRule="NonZero"/>
                        </Path.Data>
                    </Path>
                    <Polyline xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Points="14 2 14 8 20 8" Name="polyline4" FillRule="NonZero" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="16" Y1="13" X2="8" Y2="13" Name="line12" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="16" Y1="17" X2="8" Y2="17" Name="line13" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Polyline xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Points="10 9 9 9 8 9" Name="polyline10" FillRule="NonZero" StrokeThickness="2" Stroke="Black" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                </Canvas>
            </Canvas>
            <!--LockedBlack-->
            <Canvas x:Key="LockedFileText" Name="svg13" Width="24" Height="24">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="g26">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.41289393 0 0 0.41289393 7.0494538 7.041092"/>
                    </Canvas.RenderTransform>
                    <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="path13" StrokeThickness="2" Stroke="{StaticResource LockedFore}" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round">
                        <Path.Data>
                            <PathGeometry Figures="M 14 2 H 6 A 2 2 0 0 0 4 4 v 16 a 2 2 0 0 0 2 2 h 12 a 2 2 0 0 0 2 -2 V 8 Z" FillRule="NonZero"/>
                        </Path.Data>
                    </Path>
                    <Polyline xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Points="14 2 14 8 20 8" Name="polyline5" FillRule="NonZero" StrokeThickness="2" Stroke="{StaticResource LockedFore}" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="16" Y1="13" X2="8" Y2="13" Name="line14" StrokeThickness="2" Stroke="{StaticResource LockedFore}" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="16" Y1="17" X2="8" Y2="17" Name="line5" StrokeThickness="2" Stroke="{StaticResource LockedFore}" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Polyline xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Points="10 9 9 9 8 9" Name="polyline1" FillRule="NonZero" StrokeThickness="2" Stroke="{StaticResource LockedFore}" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                </Canvas>
            </Canvas>
            <!--White-->
            <Canvas x:Key="WhiteFileText" Name="svg12_2" Width="24" Height="24">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Canvas Name="aza2">
                    <Canvas.RenderTransform>
                        <MatrixTransform Matrix="0.41289393 0 0 0.41289393 7.0494538 7.041092"/>
                    </Canvas.RenderTransform>
                    <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="path" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round">
                        <Path.Data>
                            <PathGeometry Figures="M 14 2 H 6 A 2 2 0 0 0 4 4 v 16 a 2 2 0 0 0 2 2 h 12 a 2 2 0 0 0 2 -2 V 8 Z" FillRule="NonZero"/>
                        </Path.Data>
                    </Path>
                    <Polyline xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Points="14 2 14 8 20 8" Name="polyline" FillRule="NonZero" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="16" Y1="13" X2="8" Y2="13" Name="line" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Line xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" X1="16" Y1="17" X2="8" Y2="17" Name="line15" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                    <Polyline xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Points="10 9 9 9 8 9" Name="polyline100" FillRule="NonZero" StrokeThickness="2" Stroke="White" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round"/>
                </Canvas>
            </Canvas>

            <Style x:Key="SliderStyle1" TargetType="{x:Type Slider}">
                <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Slider}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="43*"/>
                                        <ColumnDefinition Width="Auto" MinWidth="50"/>
                                        <ColumnDefinition Width="6*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="Auto" Margin="0,0,0,20" Placement="Top" Grid.Row="0" Visibility="Collapsed" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                                    <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="Auto" Margin="0,2,0,-6" Placement="Bottom" Grid.Row="2" Visibility="Collapsed" Grid.ColumnSpan="3"/>
                                    <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"  Grid.Row="2" Visibility="Hidden" Grid.Column="1" Margin="7,0,43,0"/>
                                    <Track x:Name="PART_Track" OpacityMask="{x:Null}" Grid.Row="1" Grid.ColumnSpan="2" >
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Background="{TemplateBinding Foreground}" Command="Slider.DecreaseLarge">
                                                <RepeatButton.Style>
                                                    <Style TargetType="{x:Type RepeatButton}">
                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                        <Setter Property="Background" Value="Transparent"/>
                                                        <Setter Property="Focusable" Value="False"/>
                                                        <Setter Property="IsTabStop" Value="False"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                    <Canvas Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                                                                        <Rectangle x:Name="PART_SelectionRange" RadiusX="4" RadiusY="4" Fill="LightGray" Height="7" Canvas.Top="8" Width="{TemplateBinding ActualWidth}" RenderTransformOrigin="0,0.5"/>
                                                                    </Canvas>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </RepeatButton.Style>
                                            </RepeatButton>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton x:Name="IncreaseRepeatButton" Background="{DynamicResource MaterialDesignCheckBoxOff}" Command="Slider.IncreaseLarge"  Height="26" VerticalAlignment="Bottom" Margin="-12,0,0,0">
                                                <RepeatButton.Style>
                                                    <Style TargetType="{x:Type RepeatButton}">
                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                        <Setter Property="Background" Value="Transparent"/>
                                                        <Setter Property="Focusable" Value="False"/>
                                                        <Setter Property="IsTabStop" Value="False"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                    <Canvas Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                                                                        <Rectangle x:Name="PART_SelectionRange"  HorizontalAlignment="Center"
               VerticalAlignment="Center"  Fill="LightGray" RadiusX="4" RadiusY="4" Height="7" Width="{TemplateBinding ActualWidth}" Canvas.Top="10"/>
                                                                    </Canvas>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsEnabled" Value="False">
                                                                            <Setter Property="Fill" TargetName="PART_SelectionRange" Value="#AEAEAE"/>

                                                                        </Trigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </RepeatButton.Style>
                                            </RepeatButton>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb x:Name="Thumb" Focusable="False" Height="24" Background="White" OverridesDefaultStyle="True"  HorizontalAlignment="Center" VerticalAlignment="Bottom" Width="14">
                                                <Thumb.Template>
                                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                                        <Grid HorizontalAlignment="Left" UseLayoutRounding="True" VerticalAlignment="Center">
                                                            <Ellipse x:Name="shadow" Fill="{TemplateBinding Foreground}" Height="22" Margin="-12" Opacity="0" UseLayoutRounding="True" Width="22"/>
                                                            <Ellipse x:Name="grip" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" Height="14" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="True" Width="14">
                                                                <Ellipse.RenderTransform>
                                                                    <ScaleTransform ScaleY="1" ScaleX="1"/>
                                                                </Ellipse.RenderTransform>
                                                            </Ellipse>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Duration="0:0:0.2" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="shadow"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="shadow"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                            </Trigger>
                                                            <Trigger Property="IsDragging" Value="True">
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="grip">
                                                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.5">
                                                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                                                            <SineEase EasingMode="EaseInOut"/>
                                                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                                                    </EasingDoubleKeyFrame>
                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="grip">
                                                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.5">
                                                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                                                            <SineEase EasingMode="EaseInOut"/>
                                                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                                                    </EasingDoubleKeyFrame>
                                                                                </DoubleAnimationUsingKeyFrames>
                                                                            </Storyboard>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="grip">
                                                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1.5"/>
                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                                                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                                                            <SineEase EasingMode="EaseInOut"/>
                                                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                                                    </EasingDoubleKeyFrame>
                                                                                </DoubleAnimationUsingKeyFrames>
                                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="grip">
                                                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1.5"/>
                                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                                                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                                                            <SineEase EasingMode="EaseInOut"/>
                                                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                                                    </EasingDoubleKeyFrame>
                                                                                </DoubleAnimationUsingKeyFrames>
                                                                            </Storyboard>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Fill" TargetName="grip" Value="#AEAEAE"/>
                                                                <Setter Property="Stroke" TargetName="grip" Value="#AEAEAE"/>

                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Thumb.Template>
                                            </Thumb>
                                        </Track.Thumb>
                                    </Track>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="TickPlacement" Value="TopLeft">
                                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="BottomRight">
                                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="Both">
                                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsSelectionRangeEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="IncreaseRepeatButton" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Slider}">
                                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4"/>
                                            <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4"/>
                                            <Rectangle x:Name="PART_SelectionRange" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="7" Visibility="Visible"/>
                                            <Track x:Name="PART_Track" Grid.Column="1">
                                                <Track.DecreaseRepeatButton>
                                                    <RepeatButton Background="{TemplateBinding Foreground}" Command="Slider.DecreaseLarge">
                                                        <RepeatButton.Style>
                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                <Setter Property="Background" Value="Transparent"/>
                                                                <Setter Property="Focusable" Value="False"/>
                                                                <Setter Property="IsTabStop" Value="False"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                            <Canvas Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                                                                                <Rectangle x:Name="PART_SelectionRange" Fill="{TemplateBinding Background}" Height="24" Canvas.Left="8" Width="2"/>
                                                                            </Canvas>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>
                                                        </RepeatButton.Style>
                                                    </RepeatButton>
                                                </Track.DecreaseRepeatButton>
                                                <Track.IncreaseRepeatButton>
                                                    <RepeatButton x:Name="IncreaseRepeatButton" Background="{DynamicResource MaterialDesignCheckBoxOff}" Command="Slider.IncreaseLarge">
                                                        <RepeatButton.Style>
                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                <Setter Property="Background" Value="Transparent"/>
                                                                <Setter Property="Focusable" Value="False"/>
                                                                <Setter Property="IsTabStop" Value="False"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                            <Canvas Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                                                                                <Rectangle x:Name="PART_SelectionRange" Fill="{TemplateBinding Background}" Height="24" Canvas.Left="8" Width="24"/>
                                                                            </Canvas>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>
                                                        </RepeatButton.Style>
                                                    </RepeatButton>
                                                </Track.IncreaseRepeatButton>
                                                <Track.Thumb>
                                                    <Thumb x:Name="Thumb" Focusable="False" Height="14" OverridesDefaultStyle="True" VerticalAlignment="Top" Width="14">
                                                        <Thumb.Template>
                                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                                <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                                                                    <Ellipse x:Name="shadow" Fill="{TemplateBinding Foreground}" Height="24" Margin="-12" Opacity="0" UseLayoutRounding="True" Width="24"/>
                                                                    <Ellipse x:Name="grip" Fill="{TemplateBinding Foreground}" Height="12" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="True" Width="12">
                                                                        <Ellipse.RenderTransform>
                                                                            <ScaleTransform ScaleY="1" ScaleX="1"/>
                                                                        </Ellipse.RenderTransform>
                                                                    </Ellipse>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Trigger.EnterActions>
                                                                            <BeginStoryboard>
                                                                                <Storyboard>
                                                                                    <DoubleAnimation Duration="0:0:0.2" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="shadow"/>
                                                                                </Storyboard>
                                                                            </BeginStoryboard>
                                                                        </Trigger.EnterActions>
                                                                        <Trigger.ExitActions>
                                                                            <BeginStoryboard>
                                                                                <Storyboard>
                                                                                    <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="shadow"/>
                                                                                </Storyboard>
                                                                            </BeginStoryboard>
                                                                        </Trigger.ExitActions>
                                                                    </Trigger>
                                                                    <Trigger Property="IsDragging" Value="True">
                                                                        <Trigger.EnterActions>
                                                                            <BeginStoryboard>
                                                                                <Storyboard>
                                                                                    <Storyboard>
                                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="grip">
                                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.5">
                                                                                                <EasingDoubleKeyFrame.EasingFunction>
                                                                                                    <SineEase EasingMode="EaseInOut"/>
                                                                                                </EasingDoubleKeyFrame.EasingFunction>
                                                                                            </EasingDoubleKeyFrame>
                                                                                        </DoubleAnimationUsingKeyFrames>
                                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="grip">
                                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.5">
                                                                                                <EasingDoubleKeyFrame.EasingFunction>
                                                                                                    <SineEase EasingMode="EaseInOut"/>
                                                                                                </EasingDoubleKeyFrame.EasingFunction>
                                                                                            </EasingDoubleKeyFrame>
                                                                                        </DoubleAnimationUsingKeyFrames>
                                                                                    </Storyboard>
                                                                                </Storyboard>
                                                                            </BeginStoryboard>
                                                                        </Trigger.EnterActions>
                                                                        <Trigger.ExitActions>
                                                                            <BeginStoryboard>
                                                                                <Storyboard>
                                                                                    <Storyboard>
                                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="grip">
                                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="1.5"/>
                                                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                                                                                                <EasingDoubleKeyFrame.EasingFunction>
                                                                                                    <SineEase EasingMode="EaseInOut"/>
                                                                                                </EasingDoubleKeyFrame.EasingFunction>
                                                                                            </EasingDoubleKeyFrame>
                                                                                        </DoubleAnimationUsingKeyFrames>
                                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="grip">
                                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="1.5"/>
                                                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                                                                                                <EasingDoubleKeyFrame.EasingFunction>
                                                                                                    <SineEase EasingMode="EaseInOut"/>
                                                                                                </EasingDoubleKeyFrame.EasingFunction>
                                                                                            </EasingDoubleKeyFrame>
                                                                                        </DoubleAnimationUsingKeyFrames>
                                                                                    </Storyboard>
                                                                                </Storyboard>
                                                                            </BeginStoryboard>
                                                                        </Trigger.ExitActions>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Fill" TargetName="grip" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                                                                        <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Thumb.Template>
                                                    </Thumb>
                                                </Track.Thumb>
                                            </Track>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="TickPlacement" Value="TopLeft">
                                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="TickPlacement" Value="BottomRight">
                                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="TickPlacement" Value="Both">
                                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="IsSelectionRangeEnabled" Value="True">
                                            <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Background" TargetName="IncreaseRepeatButton" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="0,1,0,0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <ControlTemplate.Resources>
                                <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut"/>
                                <Storyboard x:Key="HideRipple">
                                    <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                                <Storyboard x:Key="ShowRipple">
                                    <DoubleAnimation Duration="0" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="RippleThumb">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Viewbox Width="Auto" Margin="18,0,-39,-6">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="0" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="23.5">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="23.5"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="23.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid Height="85" Width="65" >

                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="31*"/>
                                        <RowDefinition Height="48*"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" MinWidth="54"/>

                                    </Grid.ColumnDefinitions>
                                    <Rectangle x:Name="Track" Fill="#AFAFAF" HorizontalAlignment="Left" Height="28" Margin="-14,30,0,27" Opacity="100" RadiusY="7.5" RadiusX="7.5" Stroke="#7B9EAE" VerticalAlignment="Center" Width="39" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Grid.RowSpan="2"/>
                                    <Grid x:Name="ThumbHolder" HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="1" Margin="0,29,0,26" Height="30" Width="4" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="2">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="16"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RenderTransform>
                                            <TranslateTransform X="0" Y="0"/>
                                        </Grid.RenderTransform>

                                        <Ellipse x:Name="RippleThumb" Fill="White" HorizontalAlignment="Right" Height="93" IsHitTestVisible="False" Margin="-42,-32,0,-35" Opacity="0.25" RenderTransformOrigin="0.141,-1.568" VerticalAlignment="Center" Width="46" Grid.Row="0" Grid.RowSpan="2">

                                        </Ellipse>
                                        <AdornerDecorator CacheMode="{Binding (materialDesign:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}" Grid.RowSpan="2">
                                            <Ellipse x:Name="Thumb" Effect="{DynamicResource MaterialDesignShadowDepth1}" Fill="#AFAFAF" HorizontalAlignment="Stretch" Height="52" Margin="-31,-12,10,-14" RenderTransformOrigin="3.029,2.829" Stroke="{x:Null}" VerticalAlignment="Bottom"/>
                                        </AdornerDecorator>
                                    </Grid>
                                </Grid>
                            </Viewbox>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Fill" TargetName="Thumb" Value="white"/>
                                    <Setter Property="Fill" TargetName="Track" Value="white"/>
                                    <Setter Property="Visibility" TargetName="RippleThumb" Value="Hidden"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsChecked" Value="True"/>
                                        <Condition Property="materialDesign:ToggleButtonAssist.HasOnContent" Value="True"/>
                                    </MultiTrigger.Conditions>
                                </MultiTrigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                </Trigger>
                                <Trigger Property="Button.IsDefaulted" Value="True"/>
                                <Trigger Property="IsMouseOver" Value="True"/>
                                <Trigger Property="IsPressed" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.26" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="2.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RippleThumb">
                                                    <DoubleAnimation.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="Thumb" Value="#FFBDBDBD"/>
                                    <Setter Property="Fill" TargetName="Track">
                                        <Setter.Value>
                                            <SolidColorBrush Color="Black" Opacity="0.12"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ButtonStyle2" TargetType="{x:Type Button}">

                <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                <Setter Property="materialDesign:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="materialDesign:RippleAssist.Feedback" Value="White"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth1"/>
                <Setter Property="FontWeight" Value="Medium"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="16,4"/>
                <Setter Property="Height" Value="32"/>
                <Setter Property="materialDesign:ButtonProgressAssist.IsIndicatorVisible" Value="False"/>
                <Setter Property="materialDesign:ButtonProgressAssist.Opacity" Value="0.4"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <AdornerDecorator CacheMode="{Binding (materialDesign:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}">
                                    <Grid>
                                        <Border x:Name="border"  BorderBrush="#7B9EAE" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource SecondBlue}" CornerRadius="20">
                                            <Border.Effect>
                                                <Binding Path="(materialDesign:ShadowAssist.ShadowDepth)" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <Converters:ShadowConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </Border.Effect>
                                        </Border>
                                        <ProgressBar x:Name="ProgressBar" Background="{Binding (materialDesign:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (materialDesign:ButtonProgressAssist.IndicatorForeground), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" Height="{TemplateBinding Height}" IsIndeterminate="{Binding (materialDesign:ButtonProgressAssist.IsIndeterminate), RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding (materialDesign:ButtonProgressAssist.Maximum), RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding (materialDesign:ButtonProgressAssist.Minimum), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding (materialDesign:ButtonProgressAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource MaterialDesignLinearProgressBar}" Value="{Binding (materialDesign:ButtonProgressAssist.Value), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ButtonBase}}}">
                                            <ProgressBar.Visibility>
                                                <Binding Path="(materialDesign:ButtonProgressAssist.IsIndicatorVisible)" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </ProgressBar.Visibility>
                                        </ProgressBar>
                                    </Grid>
                                </AdornerDecorator>
                                <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.23"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth1"/>
                <Setter Property="FontWeight" Value="Medium"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="16,4"/>
                <Setter Property="Height" Value="32"/>
                <Setter Property="materialDesign:ButtonProgressAssist.IsIndicatorVisible" Value="False"/>
                <Setter Property="materialDesign:ButtonProgressAssist.Opacity" Value="0.4"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <AdornerDecorator CacheMode="{Binding (materialDesign:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}">
                                    <Grid>
                                        <Border x:Name="border" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="20">
                                            <Border.Effect>
                                                <Binding Path="(materialDesign:ShadowAssist.ShadowDepth)" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <Converters:ShadowConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </Border.Effect>
                                        </Border>
                                        <ProgressBar x:Name="ProgressBar" Background="{Binding (materialDesign:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (materialDesign:ButtonProgressAssist.IndicatorForeground), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" Height="{TemplateBinding Height}" IsIndeterminate="{Binding (materialDesign:ButtonProgressAssist.IsIndeterminate), RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding (materialDesign:ButtonProgressAssist.Maximum), RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding (materialDesign:ButtonProgressAssist.Minimum), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding (materialDesign:ButtonProgressAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource MaterialDesignLinearProgressBar}" Value="{Binding (materialDesign:ButtonProgressAssist.Value), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ButtonBase}}}">
                                            <ProgressBar.Visibility>
                                                <Binding Path="(materialDesign:ButtonProgressAssist.IsIndicatorVisible)" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </ProgressBar.Visibility>
                                        </ProgressBar>
                                    </Grid>
                                </AdornerDecorator>
                                <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                </Trigger>


                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <!-- Weather Icons -->
            <Canvas Name="Sun" x:Key="Sun" Width="66" Height="66" Canvas.Left="0" Canvas.Top="0">
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="pathSun" Fill="#000000">
                    <Path.Data>
                        <PathGeometry Figures="m 54.997 34.999 h -3.998 c -1.105 0 -2 -0.895 -2 -1.999 0 -1.104 0.895 -2 2 -2 h 3.998 c 1.105 0 2 0.896 2 2 0 1.104 -0.894 1.999 -2 1.999 z M 47.142 21.688 c -0.781 0.781 -2.049 0.781 -2.828 0 -0.781 -0.781 -0.781 -2.047 0 -2.828 l 2.828 -2.828 c 0.779 -0.781 2.047 -0.781 2.828 0 0.779 0.781 0.779 2.047 0 2.828 z m -14.141 23.31 c -6.627 0 -12 -5.372 -12 -11.998 0 -6.627 5.372 -11.999 12 -11.999 6.627 0 11.998 5.372 11.998 11.999 0 6.626 -5.371 11.998 -11.998 11.998 z m 0 -19.997 c -4.418 0 -8 3.581 -8 7.999 0 4.417 3.583 7.999 8 7.999 4.417 0 7.998 -3.582 7.998 -7.999 0 -4.418 -3.58 -7.999 -7.998 -7.999 z m 0 -7.999 c -1.105 0 -2 -0.896 -2 -2 v -3.999 c 0 -1.104 0.895 -2 2 -2 1.104 0 2 0.896 2 2 v 3.999 c 0 1.104 -0.897 2 -2 2 z M 18.86 21.688 16.032 18.86 c -0.781 -0.781 -0.781 -2.047 0 -2.828 0.781 -0.781 2.047 -0.781 2.828 0 l 2.828 2.828 c 0.781 0.781 0.781 2.047 0 2.828 -0.781 0.781 -2.047 0.781 -2.828 0 z M 17.002 33 c 0 1.104 -0.896 1.999 -2 1.999 h -4 c -1.104 0 -1.999 -0.895 -1.999 -1.999 0 -1.104 0.896 -2 1.999 -2 h 4 c 1.105 0 2 0.896 2 2 z m 1.858 11.312 c 0.781 -0.78 2.047 -0.78 2.828 0 0.781 0.781 0.781 2.048 0 2.828 l -2.828 2.828 c -0.781 0.781 -2.047 0.781 -2.828 0 -0.781 -0.78 -0.781 -2.047 0 -2.828 z m 14.141 4.686 c 1.104 0 2 0.895 2 1.999 v 4 c 0 1.104 -0.896 2 -2 2 -1.105 0 -2 -0.896 -2 -2 v -4 c 0 -1.104 0.895 -1.999 2 -1.999 z m 14.141 -4.686 2.828 2.828 c 0.779 0.781 0.779 2.048 0 2.828 -0.781 0.781 -2.049 0.781 -2.828 0 L 44.314 47.14 c -0.781 -0.78 -0.781 -2.047 0 -2.828 0.779 -0.781 2.046 -0.781 2.828 0 z" FillRule="EvenOdd"/>
                    </Path.Data>
                </Path>
            </Canvas>
            <Canvas Name="CloudFog" x:Key="Cloud-Fog" Width="66" Height="66" Canvas.Left="0" Canvas.Top="0" >
                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                <Canvas.Resources/>
                <!--Unknown tag: metadata-->
                <!--Unknown tag: sodipodi:namedview-->
                <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Name="pathCloud" Fill="#000000" Stroke="White"> 
                    <Path.Data>
                        <PathGeometry Figures="m 52.9975 44.9995 h -39.995 c -1.104 0 -2 -0.896 -2 -2 0 -1.105 0.896 -2 2 -2 h 39.995 c 1.104 0 2 0.895 2 2 0 1.103 -0.895 2 -2 2 z m 0 -8 h -39.995 c -1.104 0 -2 -0.895 -2 -2 0 -1.104 0.896 -2 2 -2 h 39.995 c 1.104 0 2 0.896 2 2 0 1.105 -0.895 2 -2 2 z m -9.999 -11.998 c -1.601 0 -3.083 0.48 -4.333 1.291 -1.232 -5.317 -5.974 -9.291 -11.665 -9.291 -6.626 0 -11.998 5.373 -11.998 12 h -4 c 0 -8.835 7.163 -15.999 15.998 -15.999 6.004 0 11.229 3.312 13.965 8.204 0.664 -0.113 1.337 -0.205 2.033 -0.205 5.222 0 9.652 3.342 11.301 8 h -4.381 c -1.384 -2.39 -3.961 -4 -6.92 -4 z m -29.996 23.996 h 39.995 c 1.104 0 2 0.896 2 2 0 1.105 -0.896 2 -2 2 h -39.995 c -1.104 0 -2 -0.895 -2 -2 0 -1.104 0.895 -2 2 -2 z" FillRule="EvenOdd"/>
                    </Path.Data>
                </Path>
            </Canvas>

            <!---->
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Teal.xaml" />-->
            <ResourceDictionary Source="pack://application:,,,/Couleurs/Name.MainBlue.xaml"/>
            <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
